<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:facebook="http://www.springframework.org/schema/social/facebook"
	xmlns:google="http://www.springframework.org/schema/social/google"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:repository="http://www.springframework.org/schema/data/repository"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/social/facebook http://www.springframework.org/schema/social/spring-social-facebook.xsd
		http://www.springframework.org/schema/social/google http://www.springframework.org/schema/social/spring-social-google.xsd
		http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr/spring-dwr-3.0.xsd"
	default-autowire="byName">
	
	<!-- ============================ APPLICATION ================================= -->
	<!-- 
		DWR
	-->
	<!-- DWR will scan all Spring managed beans containing @RemoteProxy or @RemoteMethod annotations and register Creator proxies for them.
  		This will NOT scan any classes not managed by Spring.-->
	<dwr:annotation-config/>
	
	<!-- DWR will scan the classpath and search classes containing @RemoteProxy or @RemoteMethod annotations. 
		This will register the beans and Creator proxies for these classes.-->
 	<dwr:annotation-scan base-package="br.udc.engenharia.agenda.domain.entity"
 		scanDataTransferObject="true" scanRemoteProxy="false"/>

 	<!-- DWR - This is required if you want to configure any beans not managed by Spring.-->
	<dwr:configuration>
		<dwr:convert type="bean" class="java.lang.StackTraceElement"/>
		<dwr:convert type="exception" class="java.lang.Exception"/>
		
		<dwr:convert type="bean" class="br.udc.engenharia.agenda.infrastructure.jcr.MetaFile" javascript="MetaFile"/>
		<dwr:convert type="bean" class="org.joda.time.DateTime" javascript="DateTime"/>
		<dwr:convert type="bean" class="org.springframework.data.domain.PageImpl" javascript="PageImpl"/>
		<dwr:convert type="bean" class="org.springframework.data.domain.PageRequest" javascript="PageRequest"/>
		<dwr:convert type="bean" class="org.springframework.data.domain.Sort" javascript="Sort"/>
		<dwr:convert type="enum" class="org.springframework.data.domain.Sort$Direction"/>
		<dwr:convert type="enum" class="org.springframework.data.domain.Sort$NullHandling"/>
		<dwr:convert type="bean" class="org.springframework.data.domain.Sort$Order" javascript="Order"/>
	</dwr:configuration>
	
	<!-- Validation -->
     <bean id="validator"
        class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
	
	<!--
		ASPECTS 
	-->
	<aop:aspectj-autoproxy/>
	
	<!-- Exception Handler --> 
	<bean id="exceptionHandlerAspect" 
		class="br.udc.engenharia.agenda.application.aspect.ExceptionHandlerAspect"/>
		
 	<!-- 
		SECURITY  
	-->
	<!-- Password Encoder -->
	<bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />
	<bean id="saltSource" class="org.springframework.security.authentication.dao.SystemWideSaltSource">
		<property name="systemWideSalt" value="${application.security.blowfish}"/>
	</bean>
	
	<!-- Authentication Manager --> 
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider user-service-ref="IUserRepository">
			<security:password-encoder ref="passwordEncoder">
				<security:salt-source ref="saltSource"/>
			</security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>
	
	<!-- ============================ INFRASTRUCTURE ============================= -->
    <!-- 
        JCR ModeShape - MetaFile
    -->
    <bean id="metaFileRepository"
        class="br.udc.engenharia.agenda.infrastructure.jcr.MetaFileRepository"/>
         
    <bean id="modeShapeRepositoryFactory" class="br.udc.engenharia.agenda.infrastructure.jcr.modeshape.ModeShapeRepositoryFactory">
       <property name="configuration" value="classpath:jcr-modeshape-config.json"/>
    </bean>
     
    <bean id="modeShapeSessionFactory"
        class="br.udc.engenharia.agenda.infrastructure.jcr.modeshape.ModeShapeSessionFactory"/>
        
	<!--  
		DATA SOURCE
		Global DataSource Configuration with a Proxy for a target DataSource,
		fetching actual JDBC Connections lazily 
	-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<bean class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
				<property name="dataSourceClassName" value="org.postgresql.ds.PGSimpleDataSource"/>
				<property name="jdbcUrl" value="${spring.datasource.url}"/>
				<property name="username" value="${spring.datasource.username}"/>
				<property name="password" value="${spring.datasource.password}"/>
			</bean>
		</property>
	</bean>
    
</beans>